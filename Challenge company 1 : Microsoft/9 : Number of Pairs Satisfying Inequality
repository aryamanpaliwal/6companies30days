// 9 : Number of Pairs Satisfying Inequality
// Problem : https://leetcode.com/problems/number-of-pairs-satisfying-inequality/
class Solution {
public:
    long long merge(vector<int> &nums, int low, int mid, int high, int diff)
    {
        long long res=0;
        for(int i=mid+1; i<=high; i++)
        {
            int temp = upper_bound(nums.begin()+low, nums.begin()+mid+1, nums[i]+diff) - nums.begin() -1;
            if(temp<=mid)
            {
                res+=(temp-low+1);
            }
        }
        sort(nums.begin()+low, nums.begin()+high+1);
        return res;
    }
    long long divide(vector<int> &nums, int low, int high, int diff)
    {
        long long res=0;
        if(low == high)
            return res;
        int mid=low+(high-low)/2;
        res = divide(nums, low, mid, diff) + divide(nums, mid+1, high, diff);
        res += merge(nums, low, mid, high, diff);
        return res;
    }
    long long numberOfPairs(vector<int>& nums1, vector<int>& nums2, int diff)
    {
        int n=nums1.size();
        vector<int> nums(n);
        for(int i=0;i<n;i++)
        {
            nums[i]=nums1[i]-nums2[i];
        }
        return divide(nums, 0, n-1, diff);
    }
};
