// 2 : Combination Sum III
// Problem : https://leetcode.com/problems/combination-sum-iii/
class Solution {
public:
    void solve(vector<vector<int>> &res, vector<int> temp, int index, int curr_num, int n, int k, int sum)
    {
        if(sum==n && index==k)
        {
            res.push_back(temp);
            return;
        }
        if(index==k || sum>n || curr_num>9)
        {
            return;
        }
        if(curr_num<=n)
        {
            temp.push_back(curr_num);
            solve(res, temp, index+1, curr_num+1, n, k, sum+curr_num);
            temp.pop_back();
        }
        solve(res, temp, index, curr_num+1, n, k, sum);
    }

    void solve2(vector<vector<int>> &res, vector<int> temp, int k, int sum, int index, int curr_num)
    {
        if(sum == 0 && k == 0)
        {
            res.push_back(temp);
            return;
        }
        if(sum<=0 || k<=0)
        {
            return;
        }
        for(int num=curr_num; num<=9; num++)
        {
            temp[index]=num;
            solve2(res, temp, k-1, sum-num, index+1, num+1);
        }
    }
    vector<vector<int>> combinationSum3(int k, int n) {
        vector<vector<int>> res;
        // vector<int> temp;
        // solve(res, temp, 0, 1, n, k, 0);
        vector<int> temp(k);
        solve2(res, temp, k, n, 0, 1);
        return res;
    }
};
