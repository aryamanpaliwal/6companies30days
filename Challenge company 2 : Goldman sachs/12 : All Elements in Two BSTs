// 12 : All Elements in Two BSTs
// Problem : https://leetcode.com/problems/all-elements-in-two-binary-search-trees/
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void merge(vector<int> v1, vector<int> v2, vector<int> &v)
    {
        int i=0;
        int j=0;
        int s1=v1.size();
        int s2=v2.size();
        while(i<s1 && j<s2)
        {
            if(v1[i]<v2[j])
            {
                v.push_back(v1[i]);
                i++;
            }
            else
            {
                v.push_back(v2[j]);
                j++;
            }
        }
        while(i<s1)
        {
            v.push_back(v1[i]);
            i++;
        }
        while(j<s2)
        {
            v.push_back(v2[j]);
            j++;
        }
    }
    void inorder(TreeNode* root, vector<int> &in)
    {
        if(root==NULL)
            return;
        inorder(root->left, in);
        in.push_back(root->val);
        inorder(root->right, in);
    }
    vector<int> getAllElements(TreeNode* root1, TreeNode* root2) {
        vector<int> in_1;
        inorder(root1, in_1);
        vector<int> in_2;
        inorder(root2, in_2);
        vector<int> res;
        merge(in_1, in_2, res);
        return res;
    }
};
